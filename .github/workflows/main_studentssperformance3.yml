name: CI/CD Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  ECR_LOGIN_URI: ${{ secrets.AWS_ECR_LOGIN_URI }}
  IMAGE_TAG: latest
  CONTAINER_NAME: mltest
  APP_PORT: 8080
  HOST_PORT: 8080
  APP_DIR: /home/ubuntu/app

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Build & Push to ECR
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        id: build-image
        run: |
          docker build -t $ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  continuous-deployment:
    name: Deploy to EC2 Self-hosted Runner
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest image
        run: |
          # Remove old container if present (ignore errors)
          docker rm -f $CONTAINER_NAME || true
          docker pull $ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Run Docker container
        run: |
          # Start new container
          docker run -d \
            --name $CONTAINER_NAME \
            -p $HOST_PORT:$APP_PORT \
            --ipc=host \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            $ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Clean up dangling resources
        run: |
          docker system prune -f
